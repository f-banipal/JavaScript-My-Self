/* ===========================================================*/
//!                          DATA TYPE
/* ===========================================================

1. Primitive data types (ilkel)
2. Non-primitive data types(Object References) (ilkel olmayan)*/



//! ===============================================================
//?  A - PRIMITIVE DATA TYPES
//!================================================================ //

/* 
Primitive data types in JavaScript include:

1. Numbers - Integers, floats
2. Strings - Any data under single quote, double quote or backtick quote
3. Booleans - true or false value
4. Null - empty value or no value
5. Undefined - a declared variable without a value
6. Symbol - A unique value that can be generated by Symbol constructor */


//! ===============================================================
//? Primitive data types are immutable(non-modifiable) data types. 
//? Once a primitive data type is created we cannot modify it
//!================================================================ //

//* EXEMPLE-1
// ========== >> 

let word = 'JavaScript';

// If we try to modify the string stored in variable word, JavaScript should raise an error. Any data type under a single quote, double quote, or backtick quote is a string data type.

word[0] ='Y';

console.log(word);

// This expression does not change the string stored in the variable word. So, we can say that strings are not modifiable or in other words immutable. Primitive data types are compared by its values. Let us compare different data values. See the example below:

let numOne = 3;
let numTwo = 3;
console.log(numOne == numTwo);  //?true

let js = 'JavaScript'
let py = 'Python'

console.log(js == py);  //? false

let lightOn = true;
let lightOff = false;

console.log(lightOn == lightOff);

//! ===============================================================
//?  B - NON -PRIMITIVE DATA TYPES
//!================================================================ //

//? Non-primitive data types in JavaScript includes://
/*
1. Objects
2. Arrays
*/

//? Non-primitive data types are modifiable or mutable.

// We can modify the value of non-primitive data types after it gets created. Let us see by creating an array. 

//  An array is a list of data values in a square bracket. 
//? Arrays can contain the same or different data types. 
//  Array values are referenced by their index. 
//? In JavaScript array index starts at zero. I.e., the first element of an array is found at index zero, the second element at index one, and the third element at index two, etc.

let nums = [1, 2, 3];
nums[0] = 10;

console.log(nums);

// As you can see, an array, which is a non-primitive data type is mutable. Non-primitive data types cannot be compared by value. Even if two non-primitive data types have the same properties and values, they are not strictly equal.

let nums1 = [1, 2, 3];
let numbers = [1, 2, 3];

console.log(nums1 == numbers);  //? false

let userOne = {
    name: 'Ferit',
    role: 'developer',
    country: 'France'
}

let userTwo = {
    name: 'Ferit',
    role: 'developer',
    country: 'France'
}

console.log(userOne == userTwo);  //? false

// Rule of thumb, we do not compare non-primitive data types. 
// Do not compare arrays, functions, or objects. 
// Non-primitive values are referred to as reference types, because they are being compared by reference instead of value. 
//Two objects are only strictly equal if they refer to the same underlying object.

let nums2 = [1, 2, 3];
let numbers2 = nums2;

console.log(nums2 == numbers2);  // true

let userTree = {
    name: 'Ferit',
    role: 'developer',
    country: 'France'
};

let userFour = userTree;

console.log(userTree == userFour);  // true




//! ===============================================================
//?  A - NUMBERS
//!================================================================ //

//! ===============================================================
//? Declaring Number Data Types
//!================================================================ //

// Numbers are integers and decimal values which can do all the arithmetic operations. Let's see some examples of Numbers.

let age = 35 ;
const gravity = 9.81;  // we use const for non-changing values, gravitational constant in  m/s2
let mass = 72;  // mass in Kilogram
const PI = 3.14;  // pi a geometrical constant

console.log(`Age: ${age}`, `Gravity : ${gravity}`, `Kilo: ${mass}`, `PI: ${PI}`);

//! ===============================================================
//?  2 - Math Object and Methods
//!================================================================ //

//In JavaScript the Math Object provides a lots of methods to work with numbers.

const PI2 = Math.PI

console.log(PI2);  // 3.141592653589793

// Rounding to the closest number
// if above .5 up if less 0.5 down rounding

console.log(Math.round(PI2));  // 3 to round values to the nearest number
console.log(Math.round(9.81));  // 10

console.log(Math.floor(PI2));  // 3 rounding down
console.log(Math.floor(9.81));  // 9

console.log(Math.ceil(PI2));  // 4 rounding up

console.log(Math.min(-5, 3, 20, 4, 5, 7, 10, 17));  // -5, return the minimum value 

console.log(Math.max(-5, 3, 20, 4, 5, 7, 10, 17));  // 20, return the maximum value 

//----------------------------------------------
//! Let us  create random number between 0 to 10
//----------------------------------------------

const num = Math.floor(Math.random() * 11)  // creates random number between 0 and 10
console.log(num);

const num1 = Math.round(Math.random() * 11)
console.log(num1);


//----------------------------------------------
//! Absolute value
//----------------------------------------------

console.log(Math.abs(-10));  // 10
console.log(Math.abs(10));  // 10

//----------------------------------------------
//! Square root
//----------------------------------------------

console.log(Math.sqrt(100));  // 10

console.log(Math.sqrt(2));  // 1.4142135623730951

//----------------------------------------------
//! Power
//----------------------------------------------

console.log(Math.pow(3, 2));  // 9
console.log(Math.pow(4, 2));  // 16
console.log(Math.pow(0, 2));  // 0
console.log(Math.pow(-1, 2));  // 1
console.log(Math.pow(-1, 3));  // -1

console.log(Math.E);  // 2.718281828459045

//----------------------------------------------
//! Logarithm
//----------------------------------------------

//? Logarithm
//? Returns the natural logarithm with base E of x, Math.log(x)

console.log(Math.log(2));  // 0.6931471805599453
console.log(Math.log(10));  // 2.302585092994046
console.log(Math.log(2.718281828459045));  // loge(e) = 1

//? Returns the natural logarithm of 2 and 10 respectively

console.log(Math.LN2);  // 0.6931471805599453
console.log(Math.LN10);  // 2.302585092994046


//? Returns the natural logarithm with base 10  of x, Math.log10(x) and ... 
console.log(Math.log10(10));  // 1
console.log(Math.log10(100));  // 2
console.log(Math.log2(32));  // 5

//----------------------------------------------
//! Trigonometry
//----------------------------------------------

console.log(Math.sin(0));  // 0
console.log(Math.sin(30));  // -0.9880316240928618
console.log(Math.sin(60));  // -0.3048106211022167


console.log(Math.cos(0));  // 1
console.log(Math.cos(30));  // 0.15425144988758405
console.log(Math.cos(60));  // -0.9880316240928618

//! ===============================================================
//?  3 - Random Number Generator
//!================================================================ //

// The JavaScript Math Object has a random() method number generator which generates number from 0 to 0.999999999...

let randomNum = Math.random()  // Generates 0 to 0.999...
console.log(randomNum);  // Exp: 0.6744924428120957

// Now, let us see how we can use random() method to generate a random number between 0 and 10:

let randomNum1 = Math.random()
let numBtnZeroAndTen = randomNum1 * 11

console.log(numBtnZeroAndTen);  // generates 0 to 0.999

let randomNumRoundToFloor = Math.floor(numBtnZeroAndTen)
console.log(randomNumRoundToFloor);  // this gives between 0 and 10

let randomNumRound2 = Math.round(numBtnZeroAndTen)
console.log(randomNumRound2);

//! ===============================================================
//?  B - STRINGS
//!================================================================ //

// Strings are texts, which are under single , double, back-tick quote. To declare a string, we need a variable name, assignment operator, a value under a single quote, double quote, or backtick quote. Let's see some examples of strings:

let space = ' '  // an empty space string
let firstName = 'Ferit'
let lastName = 'Banipal'
let country = 'France'
let city = 'Paris'
let language = 'JavaScript'
let job = 'Developer'
let quote = "The saying, 'Seeing is Believing' is not `correct` in 2024."
let quotWithBackTick = `The saying,'Seeing is Believing' is not correct in 2020.`

// ===============================================================
//?  B - STRINGS
//================================================================ 

// Connecting two or more strings together is called concatenation. Using the strings declared in the previous String section:

let fullName = firstName + space + lastName;  // concatenation, merging two string together.
console.log(fullName);  // Ferit Banipal

// We can concatenate strings in different ways.


//! Concatenating Using Addition Operator (+)
//--------------------------------------------

// Concatenating using the addition operator is an old way. This way of concatenating is tedious and error-prone. It is good to know how to concatenate this way, but I strongly suggest to use the ES6 template strings (explained later on).

let personInfoOne = fullName + '. I am ' + age + '. I live in ' + country;
console.log(personInfoOne);  // ES5 string addition

//! Long Literal Strings
//----------------------

// A string could be a single character or paragraph or a page. If the string length is too big it does not fit in one line. We can use the backslash character (\) at the end of each line to indicate that the string will continue on the next line. 
// Example:

const paragraph = "My name is Asabeneh Yetayeh.\
I live in Finland, Helsinki.\
I am a teacher and I love teaching.\
I teach HTML, CSS, JavaScript, React, Redux, \
Node.js, Python, Data Analysis and D3.\
js for anyone who is interested to learn. \
In the end of 2019, I was thinking to expand my teaching and to reach \
to global audience and I started a Python challenge from \
November 20 - December 19.It was one of the most rewarding and \
inspiring experience.Now, we are in 2020. I am enjoying preparing \
the 30DaysOfJavaScript challenge and I hope you are enjoying too."

console.log(paragraph);

//! Escape Sequences in Strings
//-----------------------------

// In JavaScript and other programming languages \ followed by some characters is an escape sequence. Let's see the most common escape characters:

//?   \n: new line
//?   \t: Tab, means 8 spaces
//?   \\: Back slash
//?   \': Single quote (')
//?   \": Double quote (")

console.log('I hope everyone is enjoying the 30 Days Of JavaScript challenge.\nDo you ?');  // line break

console.log('Days\tTopics\tExercises');  // \t : 8 spaces

console.log('Day-1\t3\t\t5')
console.log('Day-2\t3\t\t5')
console.log('Day-3\t3\t\t5')
console.log('Day-4\t3\t\t5')
console.log('Day-5\t3\t\t5')

console.log('This is a backslash  symbol (\\)')  // To write a backslash
console.log('In every programming language it starts with \"Hello, World!\"')

console.log("In every programming language it starts with \'Hello, World!\'")

console.log('The saying \'Seeing is Believing\' isn\'t correct in 2020')


//! Template Literals (Template Strings)
//--------------------------------------

// To create a template strings, we use two back-ticks. We can inject data as expressions inside a template string. To inject data, we enclose the expression with a curly bracket({}) preceded by a $ sign. See the syntax below.

//?       Syntax
//       `String literal text`
//       `String literal text ${expression}`

//? EXEMPLE:1
//===========

console.log(`The sum of 2 and 3 is 5`);  // statically writing the data

let a = 2;
let b = 3;
console.log(`The sum of ${a} and ${b} is ${a + b}`);  // injecting the data dynamically

//? EXEMPLE:2
//===========

let firstName1 = 'Asabeneh'
let lastName1 = 'Yetayeh'
let country1 = 'Finland'
let city1 = 'Helsinki'
let language1 = 'JavaScript'
let job1 = 'teacher'
let age1 = 250
let fullName1 = firstName1 + ' ' + lastName1

let personInfoTwo = `I am ${firstName1}. I am ${age1}. I live in ${country1}.`
console.log(personInfoTwo);
let personInfoThree = `I am ${firstName}. I live  in ${city}, ${country}. I am a ${job}. I teach ${language}`
console.log(personInfoThree);


// Using a string template or string interpolation method, we can add expressions, which could be a value, or some operations (comparison, arithmetic operations, ternary operation).

let c = 2;
let d = 3;
console.log(`${a} is greater than ${b} : ${a > b}` );  // 2 is greater than 3 : false

// ===============================================================
//?  B - STRINGS - METHODS
//================================================================ 

// Everything in JavaScript is an object. A string is a primitive data type that means we can not modify it once it is created. The string object has many string methods. There are different string methods that can help us to work with strings.

//? **************************************************************
//!  1 - length:
//? *************************************************************

// The string length method returns the number of characters in a string included empty space.

//? EXEMPLE
//===========

let javaS = 'JavaScript';
console.log(javaS.length);  // 10

let myName = 'Ferit'
console.log(myName.length);  // 5


//? **************************************************************
//!  2 - Accessing characters in a string
//? *************************************************************

// We can access each character in a string using its index.
// In programming, counting starts from 0. 
//The first index of the string is zero, and the last index is the length of the string minus one.

let string = 'JavaScript'
console.log(string.length);  // 10

console.log('INDEX:  J a v a S c r i p t');
console.log('\t\t0 1 2 3 4 5 6 7 8 9');

// Let us access different characters in 'JavaScript' string.

let string1 = 'JavaScript';
let firstLetter = string1[0]

console.log(firstLetter);  //J

let secondLetter = string1[1]  // a
console.log(secondLetter);
let thirdLetter = string1[2]  // v
console.log(thirdLetter);
let lastLetter = string1[9]  // t
console.log(lastLetter);

let lastIndex = string1.length - 1
console.log(lastIndex);  // 9
console.log(string1[lastIndex]);  // t

//? **************************************************************
//!  3 - toUpperCase()
//? *************************************************************

// this method changes the string to uppercase letters.

let string2 = 'JavaScript'
console.log(string2.toUpperCase());  // JAVASCRIPT

let firstName2 = 'Ferit'
console.log(firstName2.toUpperCase());  // FERIT

let country2 = 'France'
console.log(country2.toUpperCase());  //FRANCE

//? **************************************************************
//!  4 - toLowerCase()
//? *************************************************************

//this method changes the string to lowercase letters.

let string3 = 'JavaScript'
console.log(string3.toLowerCase());  // javascript

let firstName3 = 'Ferit'
console.log(firstName3.toLowerCase());  // ferit

let country3 = 'France'
console.log(country3.toLowerCase());  // france


//? **************************************************************
//!  5 - substr()
//? *************************************************************

// It takes two arguments, the starting index and number of characters to slice.

let string4 = 'JavaScript'
console.log(string4.substr(4, 6));  // Script  (4, 6); 4: baslama indeksi, 6: secilecek karakter sayisi

//? **************************************************************
//!  6 - substring()
//? *************************************************************
// It takes two arguments, the starting index and the stopping index but it doesn't include the character at the stopping index.

let string5 = 'JavaScript'

console.log(string5.substring(0, 4));  // Java
console.log(string5.substring(4, 10));  // Script
console.log(string5.substring(4));  // Script
console.log(string5.substring(4, 6));  // Script

//? **************************************************************
//!  7 - split() => Changes to an array 
//? *************************************************************
// The split method splits a string at a specified place.

let string7 = '30 Days of JavaScript'

console.log(string7.split());  // Changes to an array -> ["30 Days Of JavaScript"]
console.log(string7.split(','));  // Changes to an array -> ["30 Days Of JavaScript"]

console.log(string7.split(''));  // ['3', '0', ' ', 'D', 'a', 'y', 's', ' ', 'o', 'f', ' ', 'J', 'a', 'v', 'a', 'S', 'c', 'r', 'i', 'p', 't']

console.log(string7.split(' '));  // Split to an array at space -> ["30", "Days", "Of", "JavaScript"]

console.log(string7.split(', '));  // ['30 Days of JavaScript']


//? **************************************************************
//!  8 - trim()  - trimStart(), trimEnd()
//? *************************************************************
// Removes trailing space in the beginning or the end of a string.

let string8 = '     30 Days Of JavaScript       '

console.log(string8);  //      30 Days Of JavaScript       
console.log(string8.trim());  // 30 Days Of JavaScript
console.log(string8.trim(''));  // 30 Days Of JavaScript
console.log(string8.trim(' '));  // 30 Days Of JavaScript
console.log(string8.trim('  '));  // 30 Days Of JavaScript
console.log(string8.trimStart());  // 
console.log(string8.trimEnd());  // 


let cumle = "   Bu cümlenin sagindaki boşluklari kaldir.    ";

// Sağdaki boşlukları kaldır
let trimmedRight = cumle.replace(/\s+$/, '');

console.log(trimmedRight);

// Soldaki boşlukları kaldır
let trimmedLeft = cumle.replace(/^\s+/, '');

console.log(trimmedLeft);


//? **************************************************************
//!  9 - includes()
//? *************************************************************
// It takes a substring argument and it checks if substring argument exists in the string. includes() returns a boolean. If a substring exist in a string, it returns true, otherwise it returns false.

let string9 = '30 Days Of JavaScript'

console.log(string9.includes('Days'));  // true
console.log(string9.includes('days'));  // false - it is case sensitive!

console.log(string9.includes('Ja'));  // true
console.log(string9.includes(''));  // true  => no space
console.log(string9.includes(' '));  // true  => 1 space
console.log(string9.includes('  '));  // false  => 2 spaces

//? **************************************************************
//!  10 - replace()
//? *************************************************************
// takes as a parameter the old substring and a new substring.

let string10 = 'Benim adim Ferit Banipal.'
console.log(string10.replace('Banipal', 'Joseph'));


let yeniDunya = "Yeni bir Dunya doguyor ve donuyor, zaferimiz buyuktur. Dunya her seye egemen, Dunya ve Mars gibi";
let regex = /Dunya/g;
let newYeniDunya = yeniDunya.replace(/Dunya/g, "Jupiter");
console.log(newYeniDunya);
console.log(yeniDunya);

//! veya kisaca
// console.log(yeniDunya.replace(/Dunya/g, "Jupiter"));


//? **************************************************************
//!  11 - charAt()
//? *************************************************************
// Takes index and it returns the value at that index

// string.charAt(index)

let string11 = '30 Days Of JavaScript'
console.log(string11.charAt());  // 3
console.log(string11.charAt(0));  // 3
console.log(string11.charAt(1));  // 0

// //? string.charAt(index): 
// Eğer belirtilen indeks dize uzunluğunu aşarsa, boş bir dize ("") döndürür.
// Karakteri okuma amacıyla kullanılır, bu nedenle atama yapılamaz.

console.log(string11.charAt(21));  // ("")
console.log(string11.charAt(20));  // t
console.log(string11.charAt(50));  // ("")


//? string[index]: 
// Eğer belirtilen indeks dize uzunluğunu aşarsa, undefined değerini döndürür.
// Belirtilen indeksteki karakteri okumak için kullanılabilir ve aynı zamanda bu indekse yeni bir karakter atamak için de kullanılabilir.

let str = 'Merhaba';
//Okuma

let charArResult = str[2];  // r
console.log(charArResult);

let charArResult1 = str[8];  // undefined
console.log(charArResult1);


let charArMethod = str.charAt(2);  // r
console.log(charArMethod);

let charArMethod1 = str.charAt(8);  // ("")
console.log(charArMethod1);

// Atama
str[2] = 'X';
console.log(str);  // Merhaba  : r yi X ile degistirmedi


let str1 = 'Merhaba';
let newArray = str1.split(''); // Diziyi parçalara ayır ve dizi bir Array a donusur.
console.log(newArray);  // ['M', 'e', 'r', 'h', 'a', 'b', 'a']


newArray[2] = 'X';            // Belirli indeksteki karakteri değiştir. "r'", 'X' ile degistir. 
let modifiedStr = newArray.join(''); // Parçaları birleştir
console.log(modifiedStr);     // "MeXhaba"

//? **************************************************************
//!  12 - charCodeAt():
//? *************************************************************

// Takes index and it returns char code (ASCII number) of the value at that index
//! string.charCodeAt(index)

let string12 = '30 Days Of JavaScript'
console.log(string12.charCodeAt(0));  // ASCII Code of '3' is 51.
console.log(string12.length);
console.log(string12.charCodeAt(string12.length-1));  // ASCII Code of 't' is 116.


//? **************************************************************
//!  13 - indexOf():  parantez icindeki stringin cumledeki ilk yerinin ilk karakterinin indeksini verir.
//? *************************************************************
// Takes a substring and if the substring exists in a string it returns the first position of the substring if does not exist it returns -1
//! string.indexOf(substring)


let string13 = '30 Days Of JavaScript'

console.log(string13.indexOf('0'));  // Index No of '0' is : 1
console.log(string13.indexOf('Of'));  // Index No of 'Of' is : start from 8
console.log(string13.lastIndexOf('Of'));
console.log(string13.indexOf(' '));  // Index No of 'first space' is : 2


//? **************************************************************
//!  14 - lastIndexOf(): parantez icindeki stringin cumledeki son yerinin ilk karakterinin indeksini verir.
//? *************************************************************
// Takes a substring and if the substring exists in a string it returns the last position of the substring if it does not exist it returns -1
//!syntax: string.lastIndexOf(substring)

let string14 = 'I love JavaScript. If you do not love JavaScript what else can you love.'

console.log(string14.length);  // 72
console.log(string14.indexOf('love'));
console.log(string14.lastIndexOf('love'));  // 67 : the first position of substing
console.log(string14.lastIndexOf('what'));  // 49
console.log(string14.lastIndexOf());  // -1
console.log(string14.lastIndexOf(""));  // 72
console.log(string14.lastIndexOf("."));  // 71
console.log(string14.indexOf('wha'));  // 49


//? **************************************************************
//!  15 - concat():
//? *************************************************************
// it takes many substrings and joins them.
//! string.concat(substring, substring, substring)

// ORNEK-1
//--------

let string15 = '30';
console.log(string15.concat(" Days ", "Of ", "JavaScript"));
console.log(string15);  // ilk string degismez.

// ORNEK-2
//--------

const sayiList1 = "1, 2, 3, 4, 5, ";
const sayiList2 = "6, 7, 8, 9, 10";
const havaGunesli = true
console.log(sayiList1.concat(sayiList2));
console.log(sayiList1.concat(havaGunesli));

// ORNEK-3
//--------

let array1 = [1, 2, 3];
let array2 = [4, 5, 6];

console.log(array1.concat(array2));  // [1, 2, 3, 4, 5, 6]
console.log(array1.concat(array2[1]));  // [1, 2, 3, 5] 

// ORNEK-4
//--------

let array = [1, 2, 3];
let newItem = 4;
console.log(array.concat(newItem, 5, [6, 7, 8]));

let array3 = [1, 2, 3];
let joinedString = array3.join(", ");  // Bir array'i string'e cevirmek istiyorsak .join() metodu kullanilabilir.
console.log(joinedString);  // "1, 2, 3"
console.log(typeof(joinedString));  // string


//? **************************************************************
//!  16 - startsWith()
//? *************************************************************
// it takes a substring as an argument and it checks if the string starts with that specified substring. It returns a boolean(true or false).
//! syntaxstring.startsWith(substring)

let string16 = 'Love is the best to in this world'

console.log(string16.startsWith("L")); // true
console.log(string16.startsWith("Love"));  // true
console.log(string16.startsWith("love"));  // false
console.log(string16.startsWith("ove"));  // false

// Burada:
// indexOf() veya match() metodu da denenebilir

let str16 = "Merhaba, dünya!";
console.log(str16.indexOf("Merhaba")); // 0

console.log(str16.match(/dünya/)); // ['dünya', index: 9, input: 'Merhaba, dünya!', groups: undefined]


//? **************************************************************
//!  17 - endsWith()
//? *************************************************************
// it takes a substring as an argument and it checks if the string ends with that specified substring. It returns a boolean(true or false).
//! string.endsWith(substring)

console.log(string16.endsWith("ove"));  // false
console.log(string16.endsWith("ld"));  // true
console.log(string16.endsWith(""));  // true
console.log(string16.endsWith("d"));  // true

//? **************************************************************
//!  18 - search()
//? *************************************************************
// it takes a substring as an argument and it returns the index of the first match. The search value can be a string or a regular expression pattern.
//! string.search(substring)

let string18 = 'I love JavaScript. If you do not love JavaScript what else can you love.'
console.log(string18.search('love'));  //2 : icerideki ifadenin ilk karakterinin indeksini dondurur
console.log(string18.search('JavaScript'));  // 7


//? **************************************************************
//!  19 - match()
//? *************************************************************
// it takes a substring or regular expression pattern as an argument and it returns an array if there is match if not it returns null. Let us see how a regular expression pattern looks like. It starts with / sign and ends with / sign.
//! syntax: string.match(substring)

let string19 = 'love'
let patternOne = /love/     // with out any flag
let patternTwo = /love/gi   // g-means to search in the whole text, i - case insensitive

let str19 = 'I love JavaScript. If you do not Love JavaScript what else can you love.'
console.log(str19.match('love'));  // ['love', index: 2, input: 'I love JavaScript. If you do not Love JavaScript what else can you love.', groups: undefined]
console.log(str19.match(/love/g));  // ['love', 'love']
console.log(str19.match(/love/gi));  // ['love', 'Love', 'love']

// Let us extract numbers from text using a regular expression. This is not the regular expression section, do not panic! We will cover regular expressions later on.

let txt = 'In 2019, I ran 30 Days of Python. Now, in 2020 I am super exited to start this challenge';
let regEx = /\d+/;

// d with escape character means d not a normal d instead acts a digit
// + means one or more digit numbers,
// if there is g after that it means global, search everywhere.

console.log(txt.match(regEx));
console.log(txt.match(/\d+/g));



//? **************************************************************
//!  20 - repeat()
//? *************************************************************
// it takes a number as argument and it returns the repeated version of the string.
//! string.repeat(n)

let string20 = 'love';
let repeatStr = string20.repeat(3);  // lovelovelove

console.log(repeatStr);


//! ===============================================================
//?  C - Checking Data Types and Casting
//!================================================================ //

//! Checking Data Types:
// To check the data type of a certain variable we use the typeof method.

console.log(typeof 'Asabeneh')  // string
console.log(typeof string20)   // string
console.log(typeof 10)          // number
console.log(typeof 3.14)        // number
console.log(typeof true)        // boolean
console.log(typeof false)       // boolean
console.log(typeof NaN)         // number
console.log(typeof job)         // undefined
console.log(typeof undefined)   // undefined
console.log(typeof null)        // object
console.log(typeof [0])        // object

// Casting: Converting one data type to another data type. We use parseInt(), parseFloat(), Number(), + sign, str() When we do arithmetic operations string numbers should be first converted to integer or float if not it returns an error.

//! String to Int
// We can convert string number to a number. Any number inside a quote is a string number. An example of a string number: '10', '5', etc. We can convert string to number using the following methods:

//      parseInt()
//      Number()
//      Plus sign(+)

let myNumber = "12";  // 12: string
console.log(parseInt(myNumber));  // 12 : 
console.log(typeof(parseInt(myNumber)));  // number

console.log(Number(myNumber));  // 12 : 
console.log(typeof(Number(myNumber)));  // Number

console.log(+(myNumber));  // 12 : 
console.log(typeof(+(myNumber)));  // Number


//! String to Float
// We can convert string float number to a float number. Any float number inside a quote is a string float number. An example of a string float number: '9.81', '3.14', '1.44', etc. We can convert string float to number using the following methods: